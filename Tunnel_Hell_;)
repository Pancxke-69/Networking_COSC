Atropia Pivot 
Tunnel CTFD

Connect to Blue internet host
ssh student@10.50.33.159 -X
	terminator

From Blue Internet Host
ssh net2_student19@10.50.20.51

passive Reconnaissance	
	ip a 
	ip n
for i in {1..254}; do (ping -c 1 10.3.0.$i 2>/dev/null | grep "bytes from" &) ; done

scan each host found using for INetwork map
draw.io

net recon methodology

host discovery
    • ruby ping sweep
    • nmap scan if no ping

port discovery
    • nmap
    • nc scan script

port validation
    • banner grabbing usind nc
	nc <ip> <port#>

 

follow on action based on ports found
	
	if 21 FTP [IP ADDR] connects to the ftpserver
		ftp <ip>
		passive
		ls
		get [filenam]
	passive
	ls
	get [file name]
	if 21 or 80 wget -r  iP_ADDRESS (or) wget -r ftp:/IP_ADDRESS (or) firefox
		wget -r <http://<ip>>
		wget -r <ftp://<ip>>
			ls
			cat
	if 22 or 23 connet and passive recon

scan methodology	
nmap -Pn [IP Addr] -T4 -p 21-23,80

quick scan ports 21-23, 80
specific ports based on hints/clues found
well known port range
which tcpdump wireshark nmap telnet curl ping
sudo which tcpdump wireshark nmap telnet curl ping


	0-1023(actually scan 1-1023)
chunks of 2000 or first 10000 ports (65535
hail mary -scan all the ports (65535

Passive Recon Methodology
Italiciezewd/dolded words are commands

hostname

permisions (then do the which command, if sudo permissions use sudo, if not do not use it will be logged)
sudo -l
	what sudo access
interfaces and subnets
	ip a
	ip addr
	ifconfig
neighbors (arp cache)
	ip n
	ip neigh
	arp -a
	show interface
files of interest
	find
	fin / -iname hint* 2>/dev/null
	find /
other listening ports 
	netstat -anop
	ss -ntlp
	ss -tlp
	ss -nulp
availbale tools
	sudo which tcpdump wiershark nmap telnet get curl ping ssh 
get
curl
ping
ssh

sudo !!


rubyping sweep

f






net 2_student19
password19

Device type
Hostname
Interface type
Interface IP
Subnet Mask CIDR
Routing Protocol, IP network and Network Name groupings
Open ports
Operating system type and versions

interfaces and subnets
	ip a
	ip addr
	ifconfig
neighbors (arp cache)
	ip n
	ip neigh
	arp -a
	show interface



Find interfaces, CIDR values for duckduckgo
VYOS Commands
	show interfaces
	show ip route
Use duckduckgo to find NetworkID

Internal Given Host
Red Internet Host

From the local Machine ssh to the given internal host
Enumerate this Internet boarder machine
1) Available tools? For current user and elevated user?
	which tcpdump wireshark nmap telnet wget curl ping ssh
	sudo which tcpdump wireshark nmap telnet wget curl ping ssh

2) familiarization
	hostname
	whoami
	permissions
		sudo -l
3)Open Ports
Ping Sweep
	nmap -Pn -T4 <IP> -p 21-23, 80
	nmap -Pn -T4 <IP> -p 1-9999
	sudo nmap -Pn -T4 <IP> -p 21-23, 80
	sudo nmap -Pn -T4 <IP> -p 1-9999
for p in {1..1023}; do(echo >/dev/tcp/<IP>/$p) >/dev/null 2>&1 && echo "$p open"; done	
for i in {1..254}; do (ping -c 1 172.16.82.$i 2>/dev/null | grep "bytes from" &) ; done
sudo nmap -sP 172.16.82.96/27

4) interface name and Net ID
	ip a
 x)protocol validation and listening ports
	exec 3<>/dev/tcp/172.16.120.1/22; echo -e "" >&3; cat <&3
	ss -ntlp
	ss -tlp
	ss -nulp

6) Scan and Enumerate the discovered networks (repeat individually for every network and interface)
	nmap -Pn -T4 <IP/CIDR> -p 21-23, 80
	nmap -Pn -T4 <IP/CIDR> -p 1-9999
	sudo nmap -Pn -T4 <IP/CIDR> -p 21-23, 80
	sudo nmap -Pn -T4 <IP/CIDR> -p 1-9999
for p in {1..1023}; do(echo >/dev/tcp/<IP/CIDR>/$p) >/dev/null 2>&1 && echo "$p open"; done	

T2 has 1steg.jpg on 
	T2 connect to RELAY on TCP port 1234 to send the file. 
Establish a Netcat relay on RELAY 
	accept T2 onnection 
	forward to T1. 
On T1 Use steghide to decode the message. 
	MD5SUM the message.

T1

Relay

T2
1steg.peg
connect to port 1234

______________________________________
ssh student@10.50.33.159 -X
External IP: 10.50.XXX.XXX (ALREADY PROVIDED) Internal IP: 10.10.0.40 (ALREADY PROVIDED)
T1 local host – open listener, receive data, steghide, md5sum
	open nc -lvp 1234
	open nc -lvp 4321
	open nc -lvp 6789
	open nc -lvp 9876
______________________
RelayBLUE_INT_DMZ_HOST-1 172.16.40.10
ssh <username>@<IP2>
mkfifo mp1

ls
------LocalHost---- | ------InsiderPrivHost------
nc -lvp 1111 < np1 | nc -lvp 1234> np1
nc -lvp 1111 < np1 | nc -lvp 4321 > np1
nc -lvp 1111 < np1 | nc -lvp 6789 > np1
nc -lvp 1111 < np1 | nc -lvp 9876> np1

_________________
T2 Donovan Insider BLUE_HOST-4IP: 172.16.82.115
ssh <username>@<IP2>
ssh <username>@<IP3>
nc <IP3B Port3B>
	1steg.jpg
	2steg.jpg
	3steg.jpg
	4steg.jpg

Use the syntax: steghide extract -sf [image name] to extract the hidden message. Use password when prompted for a passphrase.


nc 172.16.40.10 1111 > 1steg.jpg
ls
eom 1steg.jpg
ls
steghide extract -sf 1steg.jpg
password
cat <ExtractedFileName>
cat <ExtractedFileName> | md5sum
___________

ssh student@172.16.40.10
password
mkfifo np1
ls 
nc -lvp 1111 < np1 | nc -lvp 1234 > np1


nc -lvp 1111 < np1 | nc 172.16.82.115 6789 > np1


Relay 1
10
Utilize the targets T2 and RELAY to develop the following netcat relays for use by Gorgan Cyber Forces. The use of names pipes should be utilized on RELAY:
Syntax for steghide tool: 
steghide extract -sf [image name] 
Passphrase: password 
    • The Donovian Insider provided a image called 1steg.jpg on T2 and is trying to connect to RELAY on TCP port 1234 to send the file. Establish a Netcat relay on RELAY to accept this connection and forward to T1. Once the images are downloaded you will use a command-line tool called steghide to extract the message. Perform an MD5SUM on this message to create flag1.
    • File should be 89824 bytes in size. 



Blue-Internet Host Local Machine
nc 172.16.40.10 1111 > 1steg.jpg
ls
eom 1steg.jpg  (opens the file to a gui display)
ls
steghide extract -sf 1steg.jpg
password
cat <ExtractedFileName>
cat <ExtractedFileName> | md5sum

_____________
Relay
Blue-Int-DMZ-Host
nc -lvp 1111 < np1 | nc -lvp 1234 > np1


Relay2
nc -lvp 1111 < np1 | nc -lvp 4321 > np1

Relay3
nc -lvp 1111 < np1 | nc 172.16.82.115 6789 > np1
Relay4
nc -lvp 1111 < np1 | nc 172.16.82.115 9876 > np1


Teredo Tunneling
    • RFC 4380
    • Allows IPv4 clients to access IPv6 clients
    • Encapsulates IPv6 packets within UDP
    • Commonly used for devices behind NAT
    • Uses the 2001:0000::/32 prefix
ISATAP (PRIVATE LOCAL USE)
    • Allows IPv6 hosts to communicate over an IPv4 network within a site (local network)
    • Can be used over the internet for specific site-to-site communications.
    • Generates a Link-Local address using its IPv4 address
    • 192.168.199.99 → FE80::0000:5EFE:c0a8:c763
Covert Channels
    • Using common and legitimate protocols to transfer data in illegitimate ways.
    • Unauthorized/hidden communication between entities.
    • Utilizes computer system resources, mechanisms, or protocols.
    • Transmits information contrary to design intent.
    • Bypasses security, violates policies, leaks sensitive data.
Type of Covert Channels
    • Storage
        ◦ Payload
        ◦ Header
            ▪ IP Header (TOS, IP ID, Flags + Fragmentation, and Options)
            ▪ TCP Header (Reserved, URG Pointer, and Options)
Type of Covert Channels
    • Timing
        ◦ Modifying transmission of legitimate traffic
        ◦ Delaying packets between nodes
        ◦ Watch TTL changes
        ◦ Watch for variances between transmissions
Common Protocols used with Covert Channels
    • ICMP
    • DNS
    • HTTP
How to Detect Covert Channels
    • Host Analysis
        ◦ Requires knowledge of each applications expected behavior.
    • Network Analysis
        ◦ A good understanding of your network and the common network protocols being used is the key
    • Baselining of what is normal to detect what is abnormal
Detecting Covert Channels with ICMP
    • ICMP works with one request and one reply answer
        ◦ Type 8 code 0 request
        ◦ Type 0 code 0 answer
    • Check for:
        ◦ Payload imbalance
            ▪ Changes to the ping packet size is cause for alarm
        ◦ Request/responce imbalance
            ▪ more responses than request then there is likely and command and control channel or nefarious actviity
        ◦ Large payloads in response
            ▪ oversized packet sizes
		
ICMP Covert Channel Tools
    1. ptunnel
    2. Loki
    3. 007shell
    4. ICMP Backdoor
    5. B0CK
    6. Hans
Detecting Covert Channels with DNS
    • DNS is a request/response protocol
    • 1 request typically gets 1 response
    • Payloads generally do no exceed 512 bytes
    • Check for:
        ◦ Request/response imbalances
        ◦ Unusual payloads
        ◦ Burstiness or continuous use
            ▪ addresses and routes should be stored in cache
            ▪ multiple fast paced requests in  a short period of time
                • usually indicates automation or script

DNS Covert Channel Tools
    1. OzymanDNS
    2. NSTX
    3. dns2tcp
    4. iodine
    5. heyoka
    6. dnscat2

Detecting Covert Channels with HTTP
    • Request/Response protocol to pull web content
    • GET request may include .png, .exe, .(anything) files
    • Can vary in sizes of payloads
    • Typically "bursty" but not steady
HTTP Covert Channel Tools
    1. tunnelshell tools
    2. HTTPTunnel
    3. SirTunnel
    4. go HTTP tunnel
Steganography Injection
    • Done by inserting message into the unused (whitespace) of the file, usually in a graphic
    • Second most common method
    • Adds size to the file
    • Hard to detect unless you have original file
    • tools:
        ◦ StegHide
Steganography Substitution
    • Done by inserting message into the insignificant portion of the file
    • Most common method used
    • Elements within a digital medium are replaced with hidden information
    • Example
        ◦ Change color pallate (+1/-1)

Steganography
    • Hiding messages inside legitimate information objects
        ◦ Methods:
            ▪ Injection
            ▪ Substitution
            ▪ Propagation
Steganography Propagation
    • Generates a new file entirely
    • Needs special software to manipulate file
        ◦ tools:
            ▪ StegSecret
            ▪ HyDEn
            ▪ Spammimic

Secure Shell (SSH)
SSH
    • Various Implementations (v1 and v2)
    • Provides authentication, encryption, and integrity.
    • Allows remote terminal sessions
    • Can enable X11 Forwarding
    • Used for tunneling and port forwarding
    • Proxy connections
        ◦ legitimate with credentials
        ◦ vs a MITM attack which is 
SSH Architecture
    • Client vs Server vs Session
    • Keys:
        ◦ User Key - Asymmetric public key used to identify the user to the server
        ◦ Host Key - Asymmetric public key used to identify the server to the user
        ◦ Session Key - Symmetric key created by the client and server to protect the session’s communication.

SSH First Connect
student@internet-host:~$ ssh student@172.16.82.106
The authenticity of host '172.16.82.106 (172.16.82.106)' can't be established.
ECDSA key fingerprint is SHA256:749QJCG1sf9zJWUm1LWdMWO8UACUU7UVgGJIoTT8ig0.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '172.16.82.106' (ECDSA) to the list of known hosts.
student@172.16.82.106's password:
student@blue-host-1:~$
    • You will need to approve the Server Host (Public) Key
    • Key is saved to /home/student/.ssh/known_hosts
SSH Re-Connect
ssh student@172.16.82.106
student@172.16.82.106's password:
student@blue-host-1:~$
    • Further SSH connections to server will not prompt to save key as long as key does not change

SSH Host key Changed
ssh student@172.16.82.106
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that a host key has just been changed.
The fingerprint for the ECDSA key sent by the remote host is
SHA256:RO05vd7h1qmMmBum2IPgR8laxrkKmgPxuXPzMpfviNQ.
Please contact your system administrator.
Add correct host key in /home/student/.ssh/known_hosts to get rid of this message.
Offending ECDSA key in /home/student/.ssh/known_hosts:1
remove with:
ssh-keygen -f "/home/student/.ssh/known_hosts" -R "172.16.82.106"
ECDSA host key for 172.16.82.106 has changed and you have requested strict checking.
Host key verification failed.
SSH Key Change Fix
ssh-keygen -f "/home/student/.ssh/known_hosts" -R "172.16.82.106"
    • Copy/Paste the ssh-geygen message to remove the Host key from the known_hosts file
SSH Port Forwarding
    • Creates channels using SSH-CONN protocol
    • Allows for tunneling of other services through SSH
    • Provides insecure services encryption
SSH Options
    • -L - Creates a port on the client mapped to a ip:port via the server
    • -D - Creates a port on the client and sets up a SOCKS4 proxy tunnel where the target ip:port is specified dynamically (proxychains port 9050)
    • -R - Creates the port on the server mapped to a ip:port via the client
    • -NT - Do not execute a remote command and disable pseudo-tty (will hang window)
Local Port Forwarding
ssh -p <optional alt port> <user>@<server ip> -L <local bind port>:<tgt ip>:<tgt port> -NT
	*** the order the actions actually occur but input in this order is not 	***required -L with options can come first or second

or

ssh -L <local bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<server ip> -NT
	internally 0.0.0.0 indicates allow any ip on the network, locally it is the 	wildcard, therefore do not use it for the loopback for local port bind
	you can use the local hostname
The input order does not matter as long as the required data is with -L
Local Port Forward to localhost of server *** Not ideal we can just ssh straight there instead no need for a tunnel
Internet_Host:
ssh student@172.16.1.15 -L 1122:localhost:22
or
ssh -L 1122:localhost:22 student@172.16.1.15
Internet_Host:
ssh student@localhost -p 1122
Blue_DMZ_Host-1~$
Local Port Forward to localhost of server $$$ Actually Useful, obfuscation using ssh through a telnet port Not authenticating to  Local Host aunthenticating to Blue DMZ host 1
Internet_Host:
ssh student@172.16.1.15 -L 1123:localhost:23
or
ssh -L 1123:localhost:23 student@172.16.1.15
Internet_Host:
telnet localhost 1123
Blue_DMZ_Host-1~$

Local Port Forward to localhost of server *** DoNOTforce close
Use command-line tool like curl to view a webpage or wget to retrieve data (creates a directory)
Internet_Host:
ssh student@172.16.1.15 -L 1180:localhost:80
or
ssh -L 1180:localhost:80 student@172.16.1.15
Internet_Host:
firefox http://localhost:1180
{Webpage of Blue_DMZ_Host-1}

Local Port Forward to remote target via server
Internet_Host:
ssh student@172.16.1.15 -L 2223:172.16.40.10:23
or
ssh -L 2223:172.16.40.10:23 student@172.16.1.15
	ssh from local host to .15 and opens a local port forward on port 2223 and 	from .15 forward traffic to .10 on port 23
	creating a link then giving directions to somewhere
	local ssh connection to .15 is what can be sniffed
	from the .15 to the .10 it is open unencrypted telnet traffic
	test the connection by attempting to telnet to final destination
Internet_Host:test the port, bannergrab to ensure the port is really running the valid service and not a different service
telnet localhost 2223
Blue_INT_DMZ_Host-1~$
Local Port Forward to remote target via server

Internet_Host:
ssh student@172.16.1.15 -L 2280:172.16.40.10:80
or
ssh -L 2280:172.16.40.10:80 student@172.16.1.15

Internet_Host:
firefox http://localhost:2280
{Webpage of Blue_INT_DMZ_Host-1}
Forward through Tunnel
Internet_Host:
ssh student@172.16.1.15 -L 2222:172.16.40.10:22
ssh student@localhost -p 2222 -L 3322:172.16.82.106:22
 ** test if port 2222 is open on the .10 to see if you can ssh to the box
Internet_Host:
ssh student@localhost -p 3322
Blue_Host-1~$
Forward through Tunnel
Internet_Host:
ssh student@172.16.1.15 -L 2222:172.16.40.10:22
ssh student@localhost -p 2222 -L 3323:172.16.82.106:23
Internet_Host:
ssh student@localhost -p 3323
Blue_Host-1~$
Forward through Tunnel

Internet_Host:
ssh student@172.16.1.15 -L 2222:172.16.40.10:22
ssh student@localhost -p 2222 -L 3380:172.16.82.106:80
Internet_Host:
firefox http://localhost:3380
{Webpage of Blue_Host-1}

Dynamic Port Forwarding

ssh <user>@<server ip> -p <alt port> -D <port> -NT
or
ssh -D <port> -p <alt port> <user>@<server ip> -NT
    • Proxychains default port is 9050
    • Creates a dynamic socks4 proxy that interacts alone, or with a previously established remote or local port forward. TCP only will not work on ping a UDP protocol
    • Allows the use of scripts and other userspace programs through the tunnel.
SSH Dynamic Port Forwarding 1-Step *** only one dynamic tunnel open at a time
Internet_Host:
ssh student@172.16.1.15 -D 9050
or
ssh -D 9050 student@172.16.1.15

SSH Dynamic Port Forwarding 1-Step
Internet_Host:
proxychains ./scan.sh
proxychains nmap -Pn 172.16.40.0/27 -p 21-23,80
proxychains ssh student@172.16.40.10
proxychains telnet 172.16.40.10
proxychains wget -r http://172.16.40.10
proxychains wget -r ftp://172.16.40.10
Internet_Host:
proxychains ./scan.sh
proxychains nmap -Pn 172.16.82.96/27 -p 21-23,80
proxychains ssh student@172.16.82.106
proxychains telnet 172.16.82.106
proxychains wget -r http://172.16.82.106
proxychains wget -r ftp://172.16.82.10

SSH Dynamic Port Forwarding 2-Step
Internet_Host:
ssh student@172.16.1.15 -L 2222:172.16.40.10:22
or
ssh -L 2222:172.16.40.10:22 student@172.16.1.15
Internet_Host:
ssh student@localhost -p 2222 -D 9050
or
ssh -D 9050 student@localhost -p 2222
SSH Dynamic Port Forwarding 2-Step
Internet_Host:
proxychains ./scan.sh
proxychains nmap -Pn 172.16.82.96/27 -p 21-23,80
proxychains ssh student@172.16.82.106
proxychains telnet 172.16.82.106
proxychains wget -r http://172.16.82.106
proxychains wget -r ftp://172.16.82.106
Local is put it on the box I am on
Remote Port Forwarding put it on the box I connect to
ssh -p <optional alt port> <user>@<server ip> -R <remote bind port>:<tgt ip>:<tgt port> -NT

or

ssh -R <remote bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<server ip> -NT

-R box that you ssh to
-L box that you are on
 if a port is bound to something keep on sliding to the final destination bc this portion is hidden bc there is no drop out opening here
 
Ex telnet to a remote box from your local host
then ssh back to the local host and opening a remote port on the local host
	-R 4422:127.0.0.1:rhp
	remote box opens a rhp on the loca(you)host through the creation of a tunneling

Remote Port Forwarding from localhost of client
Blue_DMZ_Host-1:
ssh student@10.10.0.40 -R 4422:localhost:22
or
ssh -R 4422:localhost:22 student@10.10.0.40
Internet_Host:
ssh student@localhost -p 4422
Blue_DMZ_Host-1~$
Remote Port Forwarding from localhost of client
Blue_DMZ_Host-1:
ssh student@10.10.0.40 -R 4423:localhost:23
or
ssh -R 4423:localhost:23 student@10.10.0.40
Internet_Host:
telnet localhost 4423
Blue_DMZ_Host-1~$
Remote Port Forwarding from localhost of client
Blue_DMZ_Host-1:
ssh student@10.10.0.40 -R 4480:localhost:80
or
ssh -R 4480:localhost:80 student@10.10.0.40
Internet_Host:
firefox http://localhost:4480
{Webpage of Blue_DMZ_Host-1}
Remote Port Forwarding to remote target via client
Blue_DMZ_Host-1:
ssh student@10.10.0.40 -R 5522:172.16.40.10:22
or
ssh -R 5522:172.16.40.10:22 student@10.10.0.40
Internet_Host:
ssh student@localhost -p 5522
Blue_INT_DMZ_Host-1~$
Remote Port Forwarding to remote target via client
Blue_DMZ_Host-1:
ssh student@10.10.0.40 -R 5523:172.16.40.10:23
or
ssh -R 5523:172.16.40.10:23 student@10.10.0.40
Internet_Host:
telnet localhost 5523
Blue_INT_DMZ_Host-1~$
Remote Port Forwarding to remote target via client
Blue_DMZ_Host-1:
ssh student@10.10.0.40 -R 5580:172.16.40.10:80
or
ssh -R 5580:172.16.40.10:80 student@10.10.0.40
Internet_Host:
firefox http://localhost:5580
{Webpage of Blue_INT_DMZ_Host-1}
Bridging Local and Remote Port Forwarding
Internet_Host:
ssh student@172.16.1.15 -L 2223:172.16.40.10:23 -NT
or
ssh -L 2223:172.16.40.10:23 student@172.16.1.15 -NT
Internet_Host:
telnet localhost 2223
Blue_INT_DMZ_Host-1~$
Bridging Local and Remote Port Forwarding
Blue_INT_DMZ_Host-1:
ssh student@172.16.1.15 -R 1122:localhost:22
or
ssh -R 1122:localhost:22 student@172.16.1.15
Bridging Local and Remote Port Forwarding
Internet_Host:
ssh student@172.16.1.15 -L 2222:localhost:1122
or
ssh -L 2222:localhost:1122 student@172.16.1.15
Bridging Local and Remote Port Forwarding
Internet_Host:
ssh student@localhost -p 2222 -D 9050
or
ssh -D 9050 student@localhost -p 2222
Bridging Local and Remote Port Forwarding
Internet_Host:
proxychains ./scan.sh
proxychains nmap -Pn -sT 172.16.82.96/27 -p 21-23,80
proxychains ssh student@172.16.82.106
proxychains telnet 172.16.82.106
proxychains wget -r http://172.16.82.106
proxychains wget -r ftp://172.16.82.106
D is always at home on the local machine 
you can’t be dynamic in the streets it will 
break up everything
IH-Local Machine		       .15				.10
A--->--->----->------>------>--->----B-------->----------->------->------C











IH-Local Machine		       .15				  .10
A------->------>------->------>-------B------->------>------->------>------C
-L

IH-Local Machine		       .15				  .10
A-------←-----←------←-----←------B-------←-----←------←-----←-----C


IH-Local Machine		       .15				  .10
A------->------>------->------>-------B------->------>------->------>------C



A----------------------------------------B-------------------------------------C


A----------------------------------------B-------------------------------------C

ssh to the box

which proxychains
which nc
which nmap
which tcpdump
which telnet
ip a
	map any ips
nmap ip/cidr -p 21-23,80 -T4 –open (shows open and established ports)
 OR
ss -ntlp (shows open ports)
	127.0.0.1 is only available to the local host
	0.0.0.0 is open to anyone

ssh to any found ips and enumerate

sudo -l
sudo tcpdump
ls

*** no Nmap
ssh <un@ip> -D 9050 -NT

ssh <localun@ip>

on john
proxychains curl host *** works on the remote user

proxychains hosname *** works locally















nmap -Pn 10.50.22.63 -p 21-23,80
ssh username@10.50.22.63     **** do not make a tunnel automatically make sure you can ssh if no ssh no tunnel is possible

ss -ntlp   *** FIND OPEN PORTS

which curl *** if installed use it
ip n | grep -v (filter out unwanted results like failed)
ip a
ps -elf
ps -elf | grep 9050
	to find pid to kill a process
	kill -9 <pid>

if no curl create a local port forward to go its loopback to go to the port in order to banner grab or a dynamically
cd /home
ls
or cd ..
	ls
find / -iname *hint 2>/dev/null
ssh username@10.50.22.63 -D  9050 -NT

new terminal
wget localhost
ls
ls localhost/
cat <index>

BANNERGRAB
proxychains nc localhost 9007 ***  to bannergrab screenshot and save to notes

proxychains  nmap -Pn 10.0.0.102/24 -p 21-23,80 -T5 --open** who else is there

ping sweeep
	for i in {1..254} ;do (ping -c 1 10.0.0.$i 2>/dev/null | grep “bytes from” &) ;done


proxychains nmap -Pn 10.0.0.103   p 21-23,80 -T5 --open 

manual login to ftp
proxychains ftp <ip>
anonymous
enter enter
ls (illegal
passive
ls
get welcome.msg
exit
ls
file welcom.msg
cat welcome.msg
clear

proxychains wget -r  ftp://<ip>
enter credential
ls

proxychains ssh <ip>
enter credential
exit
	Do not use a dynamic will not work only appears to there is a buried error message already in use do not try to create persistence, just do a normal ssh tunnel with local port forwarding

ssh username@LocalIP -L LocalRHP:Destination:DestinationServicePort -NT

Tunneling Practice

ssh -p <optional alt port> <user>@<server ip> -L <local bind port>:<tgt ip>:<tgt port> -NT

IH A B 

Dynamic Tunneling

From IH 10.10.0.41

as long as you can ssh you can create a dynamic tunneling
first test ssh
then back out and make it a dynamically to host a from the IH
then situational awareness
	ipa
	nmap (ping sweep)

open a new terminal
	Tunnel to B(target)
		ssh to host A(authentication)
			local tunnel to B (target service does not have to be ssh it can 						be anything)
who you run the command as is who yu will open the highport on
who you authenicate as is who the point of view the target will be seen as
		target from pov of xxx is yyy

dynamic tunnels have access to boxes not the local host

tunel interactions	
	loopback addresses
	the port that we created rhp
	destination ip




high port opened on who you authenticate to 


if you access the tunnel you will automatically be forwarded the route the tunnel takes this is not opening a port

CTFD

Day 4
Network Mapping
Network Recon

Passive – not sending network traffic
Active  - yes sending network traffic
 in

diagram

Reconnaissance Steps
    • Network Footprinting
    • Network Scanning
    • Network Enumeration
    • Vulnerability Assessment
Network Footprinting
    • Collect information relating to target
        ◦ Network
        ◦ Systems
        ◦ Organization
Network Scanning
    • Port Scanning
    • Network Scanning
    • Vulnerability Scanning
Network Enumeration
    • Network Resource and shares
    • Users and Groups
    • Routing tables
    • Auditing and Service settings
    • Machine names
    • Applications and banners
    • SNMP and DNS details
    • Other common services and ports
Vulnerability Assessment
    • Injection
    • Broken Authentication
    • Sensitive Data Exposure
    • XML External Entities
    • Broken Access Control
    • Security Misconfiguration
    • Software/Components with Known Vulnerabilities
      
Passive External
Dig vs Whois
    • Whois - queries DNS registrar over TCP port 43
        ◦ Information about the owner who registered the domain
    • Dig - queries DNS server over UDP port 53
        ◦ Name to IP records
        ◦ 
Whois
whois zonetransfer.me
Dig
dig zonetransfer.me A
dig zonetransfer.me AAAA
dig zonetransfer.me MX
dig zonetransfer.me TXT
dig zonetransfer.me NS
dig zonetransfer.me SOA

Zone Transfer
    • Between Primary and Secondary DNS over TCP port 53
    • https://digi.ninja/projects/zonetransferme.php
dir axfr <@soa.server> <target-site>
dig axfr @nsztm1.digi.ninja zonetransfer.me
Netcraft
    • Similar to whois but web-based (using the terminal and dig or whois is superior)
    • https://sitereport.netcraft.com/
Web-check.xyz
    • Checks various information about a website
    • https://web-check.xyz/
Historical Content
    • Wayback Machine
    • http://archive.org/web/
Google Searches
    • Advanced searches.
    • List of filters
    • Dork Search
site:*.ccboe.net

site:*.ccboe.net "administrator”
Shodan
    • Shodan: A search engine for Internet-connected devices
    • https://www.shodan.io
    • Be aware of attribution
Passive OS Fingerprinter (p0f)
    • p0f: Passive scanning of network traffic and packet captures.
more /etc/p0f/p0f.fp

sudo p0f -i eth0

sudo p0f -r test.pcap
Passive OS Fingerprinter (p0f)
    • Examine packets sent to/from target
    • Can guess Operating Systems and version
    • Can guess client/server application and version
SCANNING
Scanning Strategy
    • Remote to Local
    • Local to Remote
    • Local to Local
    • Remote to Remote
      
Scanning Approach
    • Aim
        ◦ Wide range target scan
        ◦ Target specific scan
    • Method
        ◦ Single source scan
            ▪ 1-to-1 or 1-to-many
        ◦ Distributed scan
            ▪ many-to-one or many-to-many
Scanning Approach
    • Vertical Scan - Range of ports on 1 box
    • Horizontal Scan - 1 or many ports on a range of boxes

NMAP
Network Service Discovery
    • Broadcast Ping/Ping sweep (-sP, -PE)
    • SYN scan (-sS)
    • Full connect scan (-sT)
    • Null scan (-sN)  *** no flags attached
    • FIN scan (-sF)
    • XMAS tree scan (-sX)
    • UDP scan (-sU)
    • Idle scan (-sl)

Network Service Discovery
    • ACK/Window scan (-sA)
    • RPC scan (-sR)
    • FTP scan (-b)
    • Decoy scan (-D)
    • OS fingerprinting scan (-O)
    • Version scan (-sV)
    • Protocol ping (-PO)
    • Discovery probes (-PE, -PP, -PM)
NMAP - Other options
    • -PE - ICMP Ping
    • -Pn - No Ping
NMAP - Time-Out
    • -T0 - Paranoid - 300 Sec
    • -T1 - Sneaky - 15 Sec
    • -T2 - Polite - 1 Sec
    • -T3 - Normal - 1 Sec
    • -T4 - Aggresive - 500 ms
    • -T5 - Insane - 250 ms

NMAP with options requires sudo because it operates within the kernel space

NMAP - Delay
    • --scan-delay <time> - Minimum delay between probes
    • --max-scan-delay <time> - Max delay between probes
used to obfuscate your scanning methods (not for class)
NMAP - Rate Limit
    • --min-rate <number> - Minimum packets per second
    • --max-rate <number> - Max packets per second

TRACEROUTE
Traceroute - Firewalking
traceroute 172.16.82.106
traceroute 172.16.82.106 -p 123
sudo traceroute 172.16.82.106 -I
sudo traceroute 172.16.82.106 -T
sudo traceroute 172.16.82.106 -T -p 443

Netcat - Scanning
nc [Options] [Target IP] [Target Port(s)]
    • -z : Port scanning mode i.e. zero I/O mode
    • -v : Be verbose [use twice -vv to be more verbose]
    • -n : do not resolve ip addresses
    • -w1 : Set time out value to 1
    • -u : To switch to UDP
Netcat - Horizontal Scanning** not ideal use a script instead
    • Range of IPs for specific ports
    • TCP
for i in {1..254}; do nc -nvzw1 172.16.82.$i 20-23 80 2>&1 & done | grep -E 'succ|open'
    • UDP
for i in {1..254}; do nc -nuvzw1 172.16.82.$i 1000-2000 2>&1 & done | grep -E 'succ|open’


check cidr
duckdckgo.com

must send something or echo something in nc in order to use netcat on udp bc udp does not respond
only tcp will respond
Netcat - Banner Grabbing
    • Find what is running on a particular port
nc [Target IP] [Target Port]
nc 172.16.82.106 22
nc -u 172.16.82.106 53
    • -u : To switch to UDP

Curl and Wget
    • Both can be used to interact with the HTTP, HTTPS and FTP protocols.
    • Curl - Displays ASCII
curl http://172.16.82.106
curl ftp://172.16.82.106
    • Wget - Downloads (-r recursive)
wget -r http://172.16.82.106
wget -r ftp://172.16.82.106

Packet Sniffers
    • Wireshark
    • Tcpdump
    • p0f
Limited to traffic in same local area of the network
Native Host Tools
    • Show TCP/IP network configuration
Windows: ipconfig /all
Linux: ip address (ifconfig depreciated)
VyOS: show interfaces

Native Host Tools
    • Show DNS configuration
Windows: ipconfig /displaydns
Linux: cat /etc/resolv.conf


Native Host Tools
    • Show ARP Cache
Windows: arp -a
Linux: ip neighbor (arp -a depreciated)
Native Host Tools
    • Show network connections
Windows: netstat
Linux: ss (netstat depreciated)

Example options useful for both netstat and ss: -antp
a = Displays all active connections and ports.
n = No determination of protocol names. Shows 22 not SSH.
t = Display only TCP connections.
u = Display only UDP connections.
p = Shows which processes are using which sockets.
Native Host Tools
    • Services File
Windows: %SystemRoot%\system32\drivers\etc\services

Linux/Unix: /etc/services
Native Host Tools
    • OS Information
Windows: systeminfo
Linux: uname -a and /etc/os-release
Native Host Tools
    • Show Running Processes
Windows: tasklist
Linux: ps or top

Example options useful for ps: -elf
e = Show all running processes
l = Show long format view
f = Show full format listing

Native Host Tools
    • Command path
which
whereis
Native Host Tools
    • Routing Table
Windows: route print
Linux: ip route (netstat -r deprecated)
VyOS: show ip route
Native Host Tools
    • File search
find / -iname hint* 2> /dev/null
find / -iname flag* 2> /dev/null
Active Internal Network Reconnaissance
    • Will use similar tools as Active External Network Reconnaissance
    • Scope and addresses may differ
ARP Scanning
arp-scan --interface=eth0 --localnet

nmap -sP -PR 172.16.82.96/27
Ping Scanning
Use duckduckgo to check network range/cidr
ping -c 1 172.16.82.106

for i in {1..254}; do (ping -c 1 172.16.82.$i 2>/dev/null | grep "bytes from" &) ; done

sudo nmap -sP 172.16.82.96/27

DEV TCP Banner Grab
exec 3<>/dev/tcp/172.16.82.106/22; echo -e "" >&3; cat <&3
DEV TCP Scanning
for p in {1..1023}; do(echo >/dev/tcp/172.16.82.106/$p) >/dev/null 2>&1 && echo "$p open"; done
Network Forensics - Mapping
    • Diagram devices
    • Line Types
    • Written Information
    • Coloring
    • Groupings
Network Forensics - Mapping
    • Device type (Router/host)
    • System Host-names
    • Interface names (eth0, eth1, etc)
    • IP address and CIDRs for all interfaces
    • TCP and UDP ports
    • MAC Address
    • OS type/version
    • Known credentials

vyos password
student password
nmap -Pn 172.16.20.1 -p 21-23,80
nmap -Pn -T4 172.16.20.1/27 -p 1-9999
ignored filtered results if a host is up after an nmap scan

h
Network Mapping Tools
    • Draw.io Local Application
    • Draw.io Web
    • Witeboard.com
    • Draw.Chat
    • SmartDraw
    • Ziteboard
    • Tutorialspoint Whiteboard
    • Explain Everything Whiteboard

	
