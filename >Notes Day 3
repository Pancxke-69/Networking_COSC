Socket Types
> Stream Sockets (TCP)    <- (User) Space Sockets
> Datagram Sockets (UDP)    <- (User) Space Sockets
> Raw Sockets (Configure)    <- (Kernel) Space Sockets
  > # Tells hardware to just send it out because we are going to be configuring it. Thats why it requires SUDO


User Space
> # NMAP no switches
> # TCPDUMP or wireshark to read a file
> # Using netcat to connect to a listener (Dont use SUDO to banner grab)
> # Using netcat to create a listener above the well known port range (1024+)
Kernel Space
> # Capturing packets on the wire
> # OS Identification or to set specific flags when scanning
> # Using scapy to craft or modify a packet for transmission
> # Using python to craft or modify RAW sockets for transmission
> # Network devices using routing protocols such as OSPF
> # Any traffic without Transport Header (ICMP)


Python
> import {module}
> from {module} import *
  > # allows to call functions from module like the function was literally inside your code so instead of example.funct() it would just be funct()
> socket.socket [ SYNTAX: socket.socket( <family>, <type>, <proto> ) ] (import socket)
> Family
  > # AF_INET*
  > # AF_INET6
  > # AF_UNIX
    > # What daemons use to speak to hardware
> Type
  > # SOCK_STREAM* (TCP)
  > # SOCK_DGRAM (UDP)
> Proto
  > 0*
  > # IPPROTO_TCP
  > # IPPROTO_UDP
  > # IPPROTO_IP
  > # IPPROTO_ICMP
  > # IPPROTO_RAW


Socket Creation Demo
[STREAM SOCKET]
    #!/usr/bin/env python3
    import socket
    
    # This can also be accomplished by using s = socket.socket() due to AF_INET and SOCK_STREAM being defaults
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    ipaddr = '127.0.0.1'
    port = 1111
    # When computer needs to talk to itself it uses 127.0.0.1 !!!!!!!!!!!!!
    
    s.connect((ipaddr, port))
    
    # To send a string as a bytes-like object, add the prefix b to the string. \n is used to go to the next line (hit enter)
    # "b" is the replier
    s.send(b'Semper Networking')
    
    # It is recommended that the buffersize used with recvfrom is a power of 2 and not a very large number of bits
    data, conn = s.recvfrom(1024)
    
    # In order to receive a message that is sent as a bytes-like-object you must decode into utf-8 (default)
    # you dont have to put in utf-8 because its the default
    print(data.decode('utf-8'))
    
    s.close()

[DGRAM SOCKET]
    #!/usr/bin/env python3
    import socket
    
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    ipaddr = '127.0.0.1'
    port = 2222
    
    # To send a string as a bytes-like object, add the prefix b to the string. \n is used to go to the next line (hit enter)
    s.sendto(b'Message\n', (ipaddr,port))
    
    # It is recommended that the buffersize used with recvfrom is a power of 2 and not a very large number of bits
    response, conn = s.recvfrom(1024)
    
    # In order to receive a message that is sent as a bytes-like-object you must decode into utf-8 (default)
    print(response.decode())


















